### Starting build.
# Target: src/exp_test.ml.depends, tags: { package(unix), extension:ml, file:src/exp_test.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -modules src/exp_test.ml > src/exp_test.ml.depends
# Target: src/exp_codegen.ml.depends, tags: { package(unix), extension:ml, file:src/exp_codegen.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -modules src/exp_codegen.ml > src/exp_codegen.ml.depends
# Target: src/exp_store.ml.depends, tags: { package(unix), extension:ml, file:src/exp_store.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -modules src/exp_store.ml > src/exp_store.ml.depends
# Target: src/exp_errors.ml.depends, tags: { package(unix), extension:ml, file:src/exp_errors.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -modules src/exp_errors.ml > src/exp_errors.ml.depends
# Target: src/syntax.ml.depends, tags: { package(unix), extension:ml, file:src/syntax.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -modules src/syntax.ml > src/syntax.ml.depends
# Target: src/exp_errors.cmo, tags: { package(unix), byte, compile, extension:cmo, extension:ml, file:src/exp_errors.cmo, file:src/exp_errors.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -I src -o src/exp_errors.cmo src/exp_errors.ml
# Target: src/syntax.cmo, tags: { package(unix), byte, compile, extension:cmo, extension:ml, file:src/syntax.cmo, file:src/syntax.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -I src -o src/syntax.cmo src/syntax.ml
# Target: src/instruction_set.ml.depends, tags: { package(unix), extension:ml, file:src/instruction_set.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -modules src/instruction_set.ml > src/instruction_set.ml.depends
# Target: src/exp_store.cmo, tags: { package(unix), byte, compile, extension:cmo, extension:ml, file:src/exp_store.cmo, file:src/exp_store.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -I src -o src/exp_store.cmo src/exp_store.ml
# Target: src/instruction_set.cmo, tags: { package(unix), byte, compile, extension:cmo, extension:ml, file:src/instruction_set.cmo, file:src/instruction_set.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -I src -o src/instruction_set.cmo src/instruction_set.ml
# Target: src/exp_eval.ml.depends, tags: { package(unix), extension:ml, file:src/exp_eval.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -modules src/exp_eval.ml > src/exp_eval.ml.depends
# Target: src/type_checking.ml.depends, tags: { package(unix), extension:ml, file:src/type_checking.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -modules src/type_checking.ml > src/type_checking.ml.depends
# Target: src/type_checking.cmo, tags: { package(unix), byte, compile, extension:cmo, extension:ml, file:src/type_checking.cmo, file:src/type_checking.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -I src -o src/type_checking.cmo src/type_checking.ml
# Target: src/exp_interp.ml.depends, tags: { package(unix), extension:ml, file:src/exp_interp.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -modules src/exp_interp.ml > src/exp_interp.ml.depends
# Target: src/exp_lex.mll, tags: { package(unix), extension:mll, file:src/exp_lex.mll, lexer, ocaml, ocamllex, quiet, traverse }
/home/teo/.opam/4.03.0/bin/ocamllex.opt -q src/exp_lex.mll
# Target: src/exp_lex.ml.depends, tags: { package(unix), extension:ml, file:src/exp_lex.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -modules src/exp_lex.ml > src/exp_lex.ml.depends
# Target: src/exp_par.mly.depends, tags: { package(unix), extension:mly, file:src/exp_par.mly, infer, menhir_ocamldep, ocaml, ocamldep, quiet, traverse }
menhir --raw-depend --ocamldep 'ocamlfind ocamldep -modules' src/exp_par.mly > src/exp_par.mly.depends
# Target: src/exp_par.mly, tags: { package(unix), byte, compile, extension:ml, extension:mly, file:src/exp_par.ml, file:src/exp_par.mly, infer, menhir, ocaml, parser, quiet, traverse }
menhir --ocamlc 'ocamlfind ocamlc -package unix -I src' --infer src/exp_par.mly
# Target: src/exp_par.mli.depends, tags: { package(unix), extension:mli, file:src/exp_par.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -modules src/exp_par.mli > src/exp_par.mli.depends
# Target: src/exp_par.cmi, tags: { package(unix), byte, compile, extension:mli, file:src/exp_par.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -I src -o src/exp_par.cmi src/exp_par.mli
# Target: src/exp_opt.ml.depends, tags: { package(unix), extension:ml, file:src/exp_opt.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -modules src/exp_opt.ml > src/exp_opt.ml.depends
# Target: src/exp_eval.cmo, tags: { package(unix), byte, compile, extension:cmo, extension:ml, file:src/exp_eval.cmo, file:src/exp_eval.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -I src -o src/exp_eval.cmo src/exp_eval.ml
# Target: src/formatter.ml.depends, tags: { package(unix), extension:ml, file:src/formatter.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -modules src/formatter.ml > src/formatter.ml.depends
# Target: src/exp_codegen.cmo, tags: { package(unix), byte, compile, extension:cmo, extension:ml, file:src/exp_codegen.cmo, file:src/exp_codegen.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -I src -o src/exp_codegen.cmo src/exp_codegen.ml
+ ocamlfind ocamlc -c -package unix -I src -o src/exp_codegen.cmo src/exp_codegen.ml
File "src/exp_codegen.ml", line 91, characters 19-364:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
(Plus|Minus|Times|Divide|Modulus|And|Or)
File "src/exp_codegen.ml", line 147, characters 12-17:
Warning 26: unused variable addr1.
File "src/exp_codegen.ml", line 155, characters 12-17:
Warning 26: unused variable addr1.
# Target: src/exp_interp.cmo, tags: { package(unix), byte, compile, extension:cmo, extension:ml, file:src/exp_interp.cmo, file:src/exp_interp.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -I src -o src/exp_interp.cmo src/exp_interp.ml
+ ocamlfind ocamlc -c -package unix -I src -o src/exp_interp.cmo src/exp_interp.ml
File "src/exp_interp.ml", line 38, characters 19-317:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
(Plus|Minus|Times|Divide|Modulus|And|Or)
File "src/exp_interp.ml", line 94, characters 12-17:
Warning 26: unused variable addr1.
File "src/exp_interp.ml", line 100, characters 12-17:
Warning 26: unused variable addr1.
# Target: src/exp_lex.cmo, tags: { package(unix), byte, compile, extension:cmo, extension:ml, file:src/exp_lex.cmo, file:src/exp_lex.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -I src -o src/exp_lex.cmo src/exp_lex.ml
# Target: src/exp_opt.cmo, tags: { package(unix), byte, compile, extension:cmo, extension:ml, file:src/exp_opt.cmo, file:src/exp_opt.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -I src -o src/exp_opt.cmo src/exp_opt.ml
+ ocamlfind ocamlc -c -package unix -I src -o src/exp_opt.cmo src/exp_opt.ml
File "src/exp_opt.ml", line 171, characters 8-297:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
(Null|Unit|Integer _|Float _|Boolean _|String _|Pointer _|Tuple _)
# Target: src/formatter.cmo, tags: { package(unix), byte, compile, extension:cmo, extension:ml, file:src/formatter.cmo, file:src/formatter.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -I src -o src/formatter.cmo src/formatter.ml
# Target: src/exp_test.cmo, tags: { package(unix), byte, compile, extension:cmo, extension:ml, file:src/exp_test.cmo, file:src/exp_test.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -I src -o src/exp_test.cmo src/exp_test.ml
# Target: src/exp_errors.cmx, tags: { package(unix), compile, extension:cmx, extension:ml, file:src/exp_errors.cmx, file:src/exp_errors.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -package unix -I src -o src/exp_errors.cmx src/exp_errors.ml
# Target: src/syntax.cmx, tags: { package(unix), compile, extension:cmx, extension:ml, file:src/syntax.cmx, file:src/syntax.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -package unix -I src -o src/syntax.cmx src/syntax.ml
# Target: src/exp_store.cmx, tags: { package(unix), compile, extension:cmx, extension:ml, file:src/exp_store.cmx, file:src/exp_store.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -package unix -I src -o src/exp_store.cmx src/exp_store.ml
# Target: src/instruction_set.cmx, tags: { package(unix), compile, extension:cmx, extension:ml, file:src/instruction_set.cmx, file:src/instruction_set.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -package unix -I src -o src/instruction_set.cmx src/instruction_set.ml
# Target: src/type_checking.cmx, tags: { package(unix), compile, extension:cmx, extension:ml, file:src/type_checking.cmx, file:src/type_checking.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -package unix -I src -o src/type_checking.cmx src/type_checking.ml
# Target: src/exp_par.ml.depends, tags: { package(unix), extension:ml, file:src/exp_par.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -modules src/exp_par.ml > src/exp_par.ml.depends
# Target: src/exp_par.cmx, tags: { package(unix), compile, extension:cmx, extension:ml, file:src/exp_par.cmx, file:src/exp_par.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -package unix -I src -o src/exp_par.cmx src/exp_par.ml
# Target: src/exp_eval.cmx, tags: { package(unix), compile, extension:cmx, extension:ml, file:src/exp_eval.cmx, file:src/exp_eval.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -package unix -I src -o src/exp_eval.cmx src/exp_eval.ml
# Target: src/exp_codegen.cmx, tags: { package(unix), compile, extension:cmx, extension:ml, file:src/exp_codegen.cmx, file:src/exp_codegen.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -package unix -I src -o src/exp_codegen.cmx src/exp_codegen.ml
+ ocamlfind ocamlopt -c -package unix -I src -o src/exp_codegen.cmx src/exp_codegen.ml
File "src/exp_codegen.ml", line 91, characters 19-364:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
(Plus|Minus|Times|Divide|Modulus|And|Or)
File "src/exp_codegen.ml", line 147, characters 12-17:
Warning 26: unused variable addr1.
File "src/exp_codegen.ml", line 155, characters 12-17:
Warning 26: unused variable addr1.
# Target: src/exp_interp.cmx, tags: { package(unix), compile, extension:cmx, extension:ml, file:src/exp_interp.cmx, file:src/exp_interp.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -package unix -I src -o src/exp_interp.cmx src/exp_interp.ml
+ ocamlfind ocamlopt -c -package unix -I src -o src/exp_interp.cmx src/exp_interp.ml
File "src/exp_interp.ml", line 38, characters 19-317:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
(Plus|Minus|Times|Divide|Modulus|And|Or)
File "src/exp_interp.ml", line 94, characters 12-17:
Warning 26: unused variable addr1.
File "src/exp_interp.ml", line 100, characters 12-17:
Warning 26: unused variable addr1.
# Target: src/exp_lex.cmx, tags: { package(unix), compile, extension:cmx, extension:ml, file:src/exp_lex.cmx, file:src/exp_lex.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -package unix -I src -o src/exp_lex.cmx src/exp_lex.ml
# Target: src/exp_opt.cmx, tags: { package(unix), compile, extension:cmx, extension:ml, file:src/exp_opt.cmx, file:src/exp_opt.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -package unix -I src -o src/exp_opt.cmx src/exp_opt.ml
+ ocamlfind ocamlopt -c -package unix -I src -o src/exp_opt.cmx src/exp_opt.ml
File "src/exp_opt.ml", line 171, characters 8-297:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
(Null|Unit|Integer _|Float _|Boolean _|String _|Pointer _|Tuple _)
# Target: src/formatter.cmx, tags: { package(unix), compile, extension:cmx, extension:ml, file:src/formatter.cmx, file:src/formatter.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -package unix -I src -o src/formatter.cmx src/formatter.ml
# Target: src/exp_test.cmx, tags: { package(unix), compile, extension:cmx, extension:ml, file:src/exp_test.cmx, file:src/exp_test.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -package unix -I src -o src/exp_test.cmx src/exp_test.ml
# Target: src/exp_test.native, tags: { package(unix), dont_link_with, extension:native, file:src/exp_test.native, link, native, ocaml, program, quiet, traverse }
ocamlfind ocamlopt -linkpkg -package unix src/exp_errors.cmx src/syntax.cmx src/exp_store.cmx src/instruction_set.cmx src/exp_codegen.cmx src/type_checking.cmx src/exp_eval.cmx src/exp_interp.cmx src/exp_par.cmx src/exp_lex.cmx src/exp_opt.cmx src/formatter.cmx src/exp_test.cmx -o src/exp_test.native
# Compilation successful.
