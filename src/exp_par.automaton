State 0:
top' -> . top [ # ]
-- On ID shift to state 1
-- On EOF shift to state 93
-- On top shift to state 94

State 1:
top -> ID . LEFT_ROUND_BRACKET param_list LEFT_CURLY_BRACKET function_content EOF [ # ]
-- On LEFT_ROUND_BRACKET shift to state 2

State 2:
top -> ID LEFT_ROUND_BRACKET . param_list LEFT_CURLY_BRACKET function_content EOF [ # ]
-- On TYPE shift to state 3
-- On RIGHT_ROUND_BRACKET shift to state 5
-- On separated_nonempty_list(COMMA,param) shift to state 6
-- On param_list shift to state 8
-- On param shift to state 90

State 3:
param -> TYPE . ID [ RIGHT_ROUND_BRACKET COMMA ]
-- On ID shift to state 4

State 4:
param -> TYPE ID . [ RIGHT_ROUND_BRACKET COMMA ]
-- On RIGHT_ROUND_BRACKET reduce production param -> TYPE ID 
-- On COMMA reduce production param -> TYPE ID 

State 5:
param_list -> RIGHT_ROUND_BRACKET . [ LEFT_CURLY_BRACKET ]
-- On LEFT_CURLY_BRACKET reduce production param_list -> RIGHT_ROUND_BRACKET 

State 6:
param_list -> separated_nonempty_list(COMMA,param) . RIGHT_ROUND_BRACKET [ LEFT_CURLY_BRACKET ]
-- On RIGHT_ROUND_BRACKET shift to state 7

State 7:
param_list -> separated_nonempty_list(COMMA,param) RIGHT_ROUND_BRACKET . [ LEFT_CURLY_BRACKET ]
-- On LEFT_CURLY_BRACKET reduce production param_list -> separated_nonempty_list(COMMA,param) RIGHT_ROUND_BRACKET 

State 8:
top -> ID LEFT_ROUND_BRACKET param_list . LEFT_CURLY_BRACKET function_content EOF [ # ]
-- On LEFT_CURLY_BRACKET shift to state 9

State 9:
top -> ID LEFT_ROUND_BRACKET param_list LEFT_CURLY_BRACKET . function_content EOF [ # ]
-- On WHILE shift to state 10
-- On TYPE shift to state 46
-- On RIGHT_CURLY_BRACKET shift to state 85
-- On READ shift to state 51
-- On PRINT shift to state 55
-- On LET shift to state 59
-- On LEFT_ROUND_BRACKET shift to state 12
-- On INT shift to state 13
-- On IF shift to state 64
-- On ID shift to state 14
-- On stmt shift to state 86
-- On function_content shift to state 88
-- On exp shift to state 72

State 10:
stmt -> WHILE . LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET LEFT_CURLY_BRACKET stmt RIGHT_CURLY_BRACKET [ SEMI_COLLON RIGHT_CURLY_BRACKET ]
-- On LEFT_ROUND_BRACKET shift to state 11

State 11:
stmt -> WHILE LEFT_ROUND_BRACKET . exp RIGHT_ROUND_BRACKET LEFT_CURLY_BRACKET stmt RIGHT_CURLY_BRACKET [ SEMI_COLLON RIGHT_CURLY_BRACKET ]
-- On LEFT_ROUND_BRACKET shift to state 12
-- On INT shift to state 13
-- On ID shift to state 14
-- On exp shift to state 43

State 12:
exp -> LEFT_ROUND_BRACKET . exp RIGHT_ROUND_BRACKET DEREF [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
-- On LEFT_ROUND_BRACKET shift to state 12
-- On INT shift to state 13
-- On ID shift to state 14
-- On exp shift to state 15

State 13:
exp -> INT . [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
-- On TIMES reduce production exp -> INT 
-- On SEMI_COLLON reduce production exp -> INT 
-- On RIGHT_ROUND_BRACKET reduce production exp -> INT 
-- On RIGHT_CURLY_BRACKET reduce production exp -> INT 
-- On PLUS reduce production exp -> INT 
-- On OR reduce production exp -> INT 
-- On NOTEQ reduce production exp -> INT 
-- On NOT reduce production exp -> INT 
-- On MINUS reduce production exp -> INT 
-- On LEQ reduce production exp -> INT 
-- On LEFT_ROUND_BRACKET reduce production exp -> INT 
-- On IN reduce production exp -> INT 
-- On GEQ reduce production exp -> INT 
-- On EQ reduce production exp -> INT 
-- On DIVIDE reduce production exp -> INT 
-- On ASSIGN reduce production exp -> INT 
-- On AND reduce production exp -> INT 

State 14:
exp -> ID . [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
-- On TIMES reduce production exp -> ID 
-- On SEMI_COLLON reduce production exp -> ID 
-- On RIGHT_ROUND_BRACKET reduce production exp -> ID 
-- On RIGHT_CURLY_BRACKET reduce production exp -> ID 
-- On PLUS reduce production exp -> ID 
-- On OR reduce production exp -> ID 
-- On NOTEQ reduce production exp -> ID 
-- On NOT reduce production exp -> ID 
-- On MINUS reduce production exp -> ID 
-- On LEQ reduce production exp -> ID 
-- On LEFT_ROUND_BRACKET reduce production exp -> ID 
-- On IN reduce production exp -> ID 
-- On GEQ reduce production exp -> ID 
-- On EQ reduce production exp -> ID 
-- On DIVIDE reduce production exp -> ID 
-- On ASSIGN reduce production exp -> ID 
-- On AND reduce production exp -> ID 

State 15:
exp -> LEFT_ROUND_BRACKET exp . RIGHT_ROUND_BRACKET DEREF [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . PLUS exp [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . MINUS exp [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . TIMES exp [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . DIVIDE exp [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . LEQ exp [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . GEQ exp [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . EQ exp [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . NOTEQ exp [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . AND exp [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . OR exp [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . NOT exp [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
-- On TIMES shift to state 16
-- On RIGHT_ROUND_BRACKET shift to state 41
-- On PLUS shift to state 23
-- On OR shift to state 27
-- On NOTEQ shift to state 29
-- On NOT shift to state 18
-- On MINUS shift to state 31
-- On LEQ shift to state 33
-- On LEFT_ROUND_BRACKET shift to state 20
-- On GEQ shift to state 35
-- On EQ shift to state 37
-- On DIVIDE shift to state 25
-- On AND shift to state 39

State 16:
exp -> exp TIMES . exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
-- On LEFT_ROUND_BRACKET shift to state 12
-- On INT shift to state 13
-- On ID shift to state 14
-- On exp shift to state 17

State 17:
exp -> exp . PLUS exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . MINUS exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . TIMES exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp TIMES exp . [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . DIVIDE exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . LEQ exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . GEQ exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . EQ exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . NOTEQ exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . AND exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . OR exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . NOT exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
-- On NOT shift to state 18
-- On LEFT_ROUND_BRACKET shift to state 20
-- On TIMES reduce production exp -> exp TIMES exp 
-- On SEMI_COLLON reduce production exp -> exp TIMES exp 
-- On RIGHT_ROUND_BRACKET reduce production exp -> exp TIMES exp 
-- On RIGHT_CURLY_BRACKET reduce production exp -> exp TIMES exp 
-- On PLUS reduce production exp -> exp TIMES exp 
-- On OR reduce production exp -> exp TIMES exp 
-- On NOTEQ reduce production exp -> exp TIMES exp 
-- On MINUS reduce production exp -> exp TIMES exp 
-- On LEQ reduce production exp -> exp TIMES exp 
-- On LEFT_ROUND_BRACKET reduce production exp -> exp TIMES exp 
-- On IN reduce production exp -> exp TIMES exp 
-- On GEQ reduce production exp -> exp TIMES exp 
-- On EQ reduce production exp -> exp TIMES exp 
-- On DIVIDE reduce production exp -> exp TIMES exp 
-- On ASSIGN reduce production exp -> exp TIMES exp 
-- On AND reduce production exp -> exp TIMES exp 
** Conflict on LEFT_ROUND_BRACKET

State 18:
exp -> exp NOT . exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
-- On LEFT_ROUND_BRACKET shift to state 12
-- On INT shift to state 13
-- On ID shift to state 14
-- On exp shift to state 19

State 19:
exp -> exp . PLUS exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . MINUS exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . TIMES exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . DIVIDE exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . LEQ exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . GEQ exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . EQ exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . NOTEQ exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . AND exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . OR exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . NOT exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp NOT exp . [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
-- On NOT shift to state 18
-- On LEFT_ROUND_BRACKET shift to state 20
-- On TIMES reduce production exp -> exp NOT exp 
-- On SEMI_COLLON reduce production exp -> exp NOT exp 
-- On RIGHT_ROUND_BRACKET reduce production exp -> exp NOT exp 
-- On RIGHT_CURLY_BRACKET reduce production exp -> exp NOT exp 
-- On PLUS reduce production exp -> exp NOT exp 
-- On OR reduce production exp -> exp NOT exp 
-- On NOTEQ reduce production exp -> exp NOT exp 
-- On MINUS reduce production exp -> exp NOT exp 
-- On LEQ reduce production exp -> exp NOT exp 
-- On LEFT_ROUND_BRACKET reduce production exp -> exp NOT exp 
-- On IN reduce production exp -> exp NOT exp 
-- On GEQ reduce production exp -> exp NOT exp 
-- On EQ reduce production exp -> exp NOT exp 
-- On DIVIDE reduce production exp -> exp NOT exp 
-- On ASSIGN reduce production exp -> exp NOT exp 
-- On AND reduce production exp -> exp NOT exp 
** Conflict on LEFT_ROUND_BRACKET

State 20:
exp -> exp LEFT_ROUND_BRACKET . exp RIGHT_ROUND_BRACKET [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
-- On LEFT_ROUND_BRACKET shift to state 12
-- On INT shift to state 13
-- On ID shift to state 14
-- On exp shift to state 21

State 21:
exp -> exp . PLUS exp [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . MINUS exp [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . TIMES exp [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . DIVIDE exp [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . LEQ exp [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . GEQ exp [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . EQ exp [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . NOTEQ exp [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . AND exp [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . OR exp [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . NOT exp [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp LEFT_ROUND_BRACKET exp . RIGHT_ROUND_BRACKET [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
-- On TIMES shift to state 16
-- On RIGHT_ROUND_BRACKET shift to state 22
-- On PLUS shift to state 23
-- On OR shift to state 27
-- On NOTEQ shift to state 29
-- On NOT shift to state 18
-- On MINUS shift to state 31
-- On LEQ shift to state 33
-- On LEFT_ROUND_BRACKET shift to state 20
-- On GEQ shift to state 35
-- On EQ shift to state 37
-- On DIVIDE shift to state 25
-- On AND shift to state 39

State 22:
exp -> exp LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET . [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
-- On TIMES reduce production exp -> exp LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET 
-- On SEMI_COLLON reduce production exp -> exp LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET 
-- On RIGHT_ROUND_BRACKET reduce production exp -> exp LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET 
-- On RIGHT_CURLY_BRACKET reduce production exp -> exp LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET 
-- On PLUS reduce production exp -> exp LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET 
-- On OR reduce production exp -> exp LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET 
-- On NOTEQ reduce production exp -> exp LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET 
-- On NOT reduce production exp -> exp LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET 
-- On MINUS reduce production exp -> exp LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET 
-- On LEQ reduce production exp -> exp LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET 
-- On LEFT_ROUND_BRACKET reduce production exp -> exp LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET 
-- On IN reduce production exp -> exp LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET 
-- On GEQ reduce production exp -> exp LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET 
-- On EQ reduce production exp -> exp LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET 
-- On DIVIDE reduce production exp -> exp LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET 
-- On ASSIGN reduce production exp -> exp LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET 
-- On AND reduce production exp -> exp LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET 

State 23:
exp -> exp PLUS . exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
-- On LEFT_ROUND_BRACKET shift to state 12
-- On INT shift to state 13
-- On ID shift to state 14
-- On exp shift to state 24

State 24:
exp -> exp . PLUS exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp PLUS exp . [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . MINUS exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . TIMES exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . DIVIDE exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . LEQ exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . GEQ exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . EQ exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . NOTEQ exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . AND exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . OR exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . NOT exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
-- On TIMES shift to state 16
-- On NOT shift to state 18
-- On LEFT_ROUND_BRACKET shift to state 20
-- On DIVIDE shift to state 25
-- On SEMI_COLLON reduce production exp -> exp PLUS exp 
-- On RIGHT_ROUND_BRACKET reduce production exp -> exp PLUS exp 
-- On RIGHT_CURLY_BRACKET reduce production exp -> exp PLUS exp 
-- On PLUS reduce production exp -> exp PLUS exp 
-- On OR reduce production exp -> exp PLUS exp 
-- On NOTEQ reduce production exp -> exp PLUS exp 
-- On MINUS reduce production exp -> exp PLUS exp 
-- On LEQ reduce production exp -> exp PLUS exp 
-- On LEFT_ROUND_BRACKET reduce production exp -> exp PLUS exp 
-- On IN reduce production exp -> exp PLUS exp 
-- On GEQ reduce production exp -> exp PLUS exp 
-- On EQ reduce production exp -> exp PLUS exp 
-- On ASSIGN reduce production exp -> exp PLUS exp 
-- On AND reduce production exp -> exp PLUS exp 
** Conflict on LEFT_ROUND_BRACKET

State 25:
exp -> exp DIVIDE . exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
-- On LEFT_ROUND_BRACKET shift to state 12
-- On INT shift to state 13
-- On ID shift to state 14
-- On exp shift to state 26

State 26:
exp -> exp . PLUS exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . MINUS exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . TIMES exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . DIVIDE exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp DIVIDE exp . [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . LEQ exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . GEQ exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . EQ exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . NOTEQ exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . AND exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . OR exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . NOT exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
-- On NOT shift to state 18
-- On LEFT_ROUND_BRACKET shift to state 20
-- On TIMES reduce production exp -> exp DIVIDE exp 
-- On SEMI_COLLON reduce production exp -> exp DIVIDE exp 
-- On RIGHT_ROUND_BRACKET reduce production exp -> exp DIVIDE exp 
-- On RIGHT_CURLY_BRACKET reduce production exp -> exp DIVIDE exp 
-- On PLUS reduce production exp -> exp DIVIDE exp 
-- On OR reduce production exp -> exp DIVIDE exp 
-- On NOTEQ reduce production exp -> exp DIVIDE exp 
-- On MINUS reduce production exp -> exp DIVIDE exp 
-- On LEQ reduce production exp -> exp DIVIDE exp 
-- On LEFT_ROUND_BRACKET reduce production exp -> exp DIVIDE exp 
-- On IN reduce production exp -> exp DIVIDE exp 
-- On GEQ reduce production exp -> exp DIVIDE exp 
-- On EQ reduce production exp -> exp DIVIDE exp 
-- On DIVIDE reduce production exp -> exp DIVIDE exp 
-- On ASSIGN reduce production exp -> exp DIVIDE exp 
-- On AND reduce production exp -> exp DIVIDE exp 
** Conflict on LEFT_ROUND_BRACKET

State 27:
exp -> exp OR . exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
-- On LEFT_ROUND_BRACKET shift to state 12
-- On INT shift to state 13
-- On ID shift to state 14
-- On exp shift to state 28

State 28:
exp -> exp . PLUS exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . MINUS exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . TIMES exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . DIVIDE exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . LEQ exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . GEQ exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . EQ exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . NOTEQ exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . AND exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . OR exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp OR exp . [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . NOT exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
-- On TIMES shift to state 16
-- On PLUS shift to state 23
-- On NOTEQ shift to state 29
-- On NOT shift to state 18
-- On MINUS shift to state 31
-- On LEQ shift to state 33
-- On LEFT_ROUND_BRACKET shift to state 20
-- On GEQ shift to state 35
-- On EQ shift to state 37
-- On DIVIDE shift to state 25
-- On SEMI_COLLON reduce production exp -> exp OR exp 
-- On RIGHT_ROUND_BRACKET reduce production exp -> exp OR exp 
-- On RIGHT_CURLY_BRACKET reduce production exp -> exp OR exp 
-- On OR reduce production exp -> exp OR exp 
-- On LEFT_ROUND_BRACKET reduce production exp -> exp OR exp 
-- On IN reduce production exp -> exp OR exp 
-- On ASSIGN reduce production exp -> exp OR exp 
-- On AND reduce production exp -> exp OR exp 
** Conflict on LEFT_ROUND_BRACKET

State 29:
exp -> exp NOTEQ . exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
-- On LEFT_ROUND_BRACKET shift to state 12
-- On INT shift to state 13
-- On ID shift to state 14
-- On exp shift to state 30

State 30:
exp -> exp . PLUS exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . MINUS exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . TIMES exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . DIVIDE exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . LEQ exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . GEQ exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . EQ exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . NOTEQ exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp NOTEQ exp . [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . AND exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . OR exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . NOT exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
-- On TIMES shift to state 16
-- On PLUS shift to state 23
-- On NOT shift to state 18
-- On MINUS shift to state 31
-- On LEQ shift to state 33
-- On LEFT_ROUND_BRACKET shift to state 20
-- On GEQ shift to state 35
-- On DIVIDE shift to state 25
-- On SEMI_COLLON reduce production exp -> exp NOTEQ exp 
-- On RIGHT_ROUND_BRACKET reduce production exp -> exp NOTEQ exp 
-- On RIGHT_CURLY_BRACKET reduce production exp -> exp NOTEQ exp 
-- On OR reduce production exp -> exp NOTEQ exp 
-- On NOTEQ reduce production exp -> exp NOTEQ exp 
-- On LEFT_ROUND_BRACKET reduce production exp -> exp NOTEQ exp 
-- On IN reduce production exp -> exp NOTEQ exp 
-- On EQ reduce production exp -> exp NOTEQ exp 
-- On ASSIGN reduce production exp -> exp NOTEQ exp 
-- On AND reduce production exp -> exp NOTEQ exp 
** Conflict on LEFT_ROUND_BRACKET

State 31:
exp -> exp MINUS . exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
-- On LEFT_ROUND_BRACKET shift to state 12
-- On INT shift to state 13
-- On ID shift to state 14
-- On exp shift to state 32

State 32:
exp -> exp . PLUS exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . MINUS exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp MINUS exp . [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . TIMES exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . DIVIDE exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . LEQ exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . GEQ exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . EQ exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . NOTEQ exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . AND exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . OR exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . NOT exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
-- On TIMES shift to state 16
-- On NOT shift to state 18
-- On LEFT_ROUND_BRACKET shift to state 20
-- On DIVIDE shift to state 25
-- On SEMI_COLLON reduce production exp -> exp MINUS exp 
-- On RIGHT_ROUND_BRACKET reduce production exp -> exp MINUS exp 
-- On RIGHT_CURLY_BRACKET reduce production exp -> exp MINUS exp 
-- On PLUS reduce production exp -> exp MINUS exp 
-- On OR reduce production exp -> exp MINUS exp 
-- On NOTEQ reduce production exp -> exp MINUS exp 
-- On MINUS reduce production exp -> exp MINUS exp 
-- On LEQ reduce production exp -> exp MINUS exp 
-- On LEFT_ROUND_BRACKET reduce production exp -> exp MINUS exp 
-- On IN reduce production exp -> exp MINUS exp 
-- On GEQ reduce production exp -> exp MINUS exp 
-- On EQ reduce production exp -> exp MINUS exp 
-- On ASSIGN reduce production exp -> exp MINUS exp 
-- On AND reduce production exp -> exp MINUS exp 
** Conflict on LEFT_ROUND_BRACKET

State 33:
exp -> exp LEQ . exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
-- On LEFT_ROUND_BRACKET shift to state 12
-- On INT shift to state 13
-- On ID shift to state 14
-- On exp shift to state 34

State 34:
exp -> exp . PLUS exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . MINUS exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . TIMES exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . DIVIDE exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . LEQ exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp LEQ exp . [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . GEQ exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . EQ exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . NOTEQ exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . AND exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . OR exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . NOT exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
-- On TIMES shift to state 16
-- On PLUS shift to state 23
-- On NOT shift to state 18
-- On MINUS shift to state 31
-- On LEFT_ROUND_BRACKET shift to state 20
-- On DIVIDE shift to state 25
-- On SEMI_COLLON reduce production exp -> exp LEQ exp 
-- On RIGHT_ROUND_BRACKET reduce production exp -> exp LEQ exp 
-- On RIGHT_CURLY_BRACKET reduce production exp -> exp LEQ exp 
-- On OR reduce production exp -> exp LEQ exp 
-- On NOTEQ reduce production exp -> exp LEQ exp 
-- On LEQ reduce production exp -> exp LEQ exp 
-- On LEFT_ROUND_BRACKET reduce production exp -> exp LEQ exp 
-- On IN reduce production exp -> exp LEQ exp 
-- On GEQ reduce production exp -> exp LEQ exp 
-- On EQ reduce production exp -> exp LEQ exp 
-- On ASSIGN reduce production exp -> exp LEQ exp 
-- On AND reduce production exp -> exp LEQ exp 
** Conflict on LEFT_ROUND_BRACKET

State 35:
exp -> exp GEQ . exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
-- On LEFT_ROUND_BRACKET shift to state 12
-- On INT shift to state 13
-- On ID shift to state 14
-- On exp shift to state 36

State 36:
exp -> exp . PLUS exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . MINUS exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . TIMES exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . DIVIDE exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . LEQ exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . GEQ exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp GEQ exp . [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . EQ exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . NOTEQ exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . AND exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . OR exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . NOT exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
-- On TIMES shift to state 16
-- On PLUS shift to state 23
-- On NOT shift to state 18
-- On MINUS shift to state 31
-- On LEFT_ROUND_BRACKET shift to state 20
-- On DIVIDE shift to state 25
-- On SEMI_COLLON reduce production exp -> exp GEQ exp 
-- On RIGHT_ROUND_BRACKET reduce production exp -> exp GEQ exp 
-- On RIGHT_CURLY_BRACKET reduce production exp -> exp GEQ exp 
-- On OR reduce production exp -> exp GEQ exp 
-- On NOTEQ reduce production exp -> exp GEQ exp 
-- On LEQ reduce production exp -> exp GEQ exp 
-- On LEFT_ROUND_BRACKET reduce production exp -> exp GEQ exp 
-- On IN reduce production exp -> exp GEQ exp 
-- On GEQ reduce production exp -> exp GEQ exp 
-- On EQ reduce production exp -> exp GEQ exp 
-- On ASSIGN reduce production exp -> exp GEQ exp 
-- On AND reduce production exp -> exp GEQ exp 
** Conflict on LEFT_ROUND_BRACKET

State 37:
exp -> exp EQ . exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
-- On LEFT_ROUND_BRACKET shift to state 12
-- On INT shift to state 13
-- On ID shift to state 14
-- On exp shift to state 38

State 38:
exp -> exp . PLUS exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . MINUS exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . TIMES exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . DIVIDE exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . LEQ exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . GEQ exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . EQ exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp EQ exp . [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . NOTEQ exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . AND exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . OR exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . NOT exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
-- On TIMES shift to state 16
-- On PLUS shift to state 23
-- On NOT shift to state 18
-- On MINUS shift to state 31
-- On LEQ shift to state 33
-- On LEFT_ROUND_BRACKET shift to state 20
-- On GEQ shift to state 35
-- On DIVIDE shift to state 25
-- On SEMI_COLLON reduce production exp -> exp EQ exp 
-- On RIGHT_ROUND_BRACKET reduce production exp -> exp EQ exp 
-- On RIGHT_CURLY_BRACKET reduce production exp -> exp EQ exp 
-- On OR reduce production exp -> exp EQ exp 
-- On NOTEQ reduce production exp -> exp EQ exp 
-- On LEFT_ROUND_BRACKET reduce production exp -> exp EQ exp 
-- On IN reduce production exp -> exp EQ exp 
-- On EQ reduce production exp -> exp EQ exp 
-- On ASSIGN reduce production exp -> exp EQ exp 
-- On AND reduce production exp -> exp EQ exp 
** Conflict on LEFT_ROUND_BRACKET

State 39:
exp -> exp AND . exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
-- On LEFT_ROUND_BRACKET shift to state 12
-- On INT shift to state 13
-- On ID shift to state 14
-- On exp shift to state 40

State 40:
exp -> exp . PLUS exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . MINUS exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . TIMES exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . DIVIDE exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . LEQ exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . GEQ exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . EQ exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . NOTEQ exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . AND exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp AND exp . [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . OR exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . NOT exp [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
-- On TIMES shift to state 16
-- On PLUS shift to state 23
-- On NOTEQ shift to state 29
-- On NOT shift to state 18
-- On MINUS shift to state 31
-- On LEQ shift to state 33
-- On LEFT_ROUND_BRACKET shift to state 20
-- On GEQ shift to state 35
-- On EQ shift to state 37
-- On DIVIDE shift to state 25
-- On SEMI_COLLON reduce production exp -> exp AND exp 
-- On RIGHT_ROUND_BRACKET reduce production exp -> exp AND exp 
-- On RIGHT_CURLY_BRACKET reduce production exp -> exp AND exp 
-- On OR reduce production exp -> exp AND exp 
-- On LEFT_ROUND_BRACKET reduce production exp -> exp AND exp 
-- On IN reduce production exp -> exp AND exp 
-- On ASSIGN reduce production exp -> exp AND exp 
-- On AND reduce production exp -> exp AND exp 
** Conflict on LEFT_ROUND_BRACKET

State 41:
exp -> LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET . DEREF [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
-- On DEREF shift to state 42

State 42:
exp -> LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET DEREF . [ TIMES SEMI_COLLON RIGHT_ROUND_BRACKET RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE ASSIGN AND ]
-- On TIMES reduce production exp -> LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET DEREF 
-- On SEMI_COLLON reduce production exp -> LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET DEREF 
-- On RIGHT_ROUND_BRACKET reduce production exp -> LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET DEREF 
-- On RIGHT_CURLY_BRACKET reduce production exp -> LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET DEREF 
-- On PLUS reduce production exp -> LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET DEREF 
-- On OR reduce production exp -> LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET DEREF 
-- On NOTEQ reduce production exp -> LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET DEREF 
-- On NOT reduce production exp -> LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET DEREF 
-- On MINUS reduce production exp -> LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET DEREF 
-- On LEQ reduce production exp -> LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET DEREF 
-- On LEFT_ROUND_BRACKET reduce production exp -> LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET DEREF 
-- On IN reduce production exp -> LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET DEREF 
-- On GEQ reduce production exp -> LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET DEREF 
-- On EQ reduce production exp -> LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET DEREF 
-- On DIVIDE reduce production exp -> LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET DEREF 
-- On ASSIGN reduce production exp -> LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET DEREF 
-- On AND reduce production exp -> LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET DEREF 

State 43:
exp -> exp . PLUS exp [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . MINUS exp [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . TIMES exp [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . DIVIDE exp [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . LEQ exp [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . GEQ exp [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . EQ exp [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . NOTEQ exp [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . AND exp [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . OR exp [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . NOT exp [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
stmt -> WHILE LEFT_ROUND_BRACKET exp . RIGHT_ROUND_BRACKET LEFT_CURLY_BRACKET stmt RIGHT_CURLY_BRACKET [ SEMI_COLLON RIGHT_CURLY_BRACKET ]
-- On TIMES shift to state 16
-- On RIGHT_ROUND_BRACKET shift to state 44
-- On PLUS shift to state 23
-- On OR shift to state 27
-- On NOTEQ shift to state 29
-- On NOT shift to state 18
-- On MINUS shift to state 31
-- On LEQ shift to state 33
-- On LEFT_ROUND_BRACKET shift to state 20
-- On GEQ shift to state 35
-- On EQ shift to state 37
-- On DIVIDE shift to state 25
-- On AND shift to state 39

State 44:
stmt -> WHILE LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET . LEFT_CURLY_BRACKET stmt RIGHT_CURLY_BRACKET [ SEMI_COLLON RIGHT_CURLY_BRACKET ]
-- On LEFT_CURLY_BRACKET shift to state 45

State 45:
stmt -> WHILE LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET LEFT_CURLY_BRACKET . stmt RIGHT_CURLY_BRACKET [ SEMI_COLLON RIGHT_CURLY_BRACKET ]
-- On WHILE shift to state 10
-- On TYPE shift to state 46
-- On READ shift to state 51
-- On PRINT shift to state 55
-- On LET shift to state 59
-- On LEFT_ROUND_BRACKET shift to state 12
-- On INT shift to state 13
-- On IF shift to state 64
-- On ID shift to state 14
-- On stmt shift to state 83
-- On exp shift to state 72

State 46:
stmt -> TYPE . ID ASSIGN exp SEMI_COLLON stmt [ SEMI_COLLON RIGHT_CURLY_BRACKET ]
-- On ID shift to state 47

State 47:
stmt -> TYPE ID . ASSIGN exp SEMI_COLLON stmt [ SEMI_COLLON RIGHT_CURLY_BRACKET ]
-- On ASSIGN shift to state 48

State 48:
stmt -> TYPE ID ASSIGN . exp SEMI_COLLON stmt [ SEMI_COLLON RIGHT_CURLY_BRACKET ]
-- On LEFT_ROUND_BRACKET shift to state 12
-- On INT shift to state 13
-- On ID shift to state 14
-- On exp shift to state 49

State 49:
exp -> exp . PLUS exp [ TIMES SEMI_COLLON PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . MINUS exp [ TIMES SEMI_COLLON PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . TIMES exp [ TIMES SEMI_COLLON PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . DIVIDE exp [ TIMES SEMI_COLLON PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . LEQ exp [ TIMES SEMI_COLLON PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . GEQ exp [ TIMES SEMI_COLLON PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . EQ exp [ TIMES SEMI_COLLON PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . NOTEQ exp [ TIMES SEMI_COLLON PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . AND exp [ TIMES SEMI_COLLON PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . OR exp [ TIMES SEMI_COLLON PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . NOT exp [ TIMES SEMI_COLLON PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET [ TIMES SEMI_COLLON PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
stmt -> TYPE ID ASSIGN exp . SEMI_COLLON stmt [ SEMI_COLLON RIGHT_CURLY_BRACKET ]
-- On TIMES shift to state 16
-- On SEMI_COLLON shift to state 50
-- On PLUS shift to state 23
-- On OR shift to state 27
-- On NOTEQ shift to state 29
-- On NOT shift to state 18
-- On MINUS shift to state 31
-- On LEQ shift to state 33
-- On LEFT_ROUND_BRACKET shift to state 20
-- On GEQ shift to state 35
-- On EQ shift to state 37
-- On DIVIDE shift to state 25
-- On AND shift to state 39

State 50:
stmt -> TYPE ID ASSIGN exp SEMI_COLLON . stmt [ SEMI_COLLON RIGHT_CURLY_BRACKET ]
-- On WHILE shift to state 10
-- On TYPE shift to state 46
-- On READ shift to state 51
-- On PRINT shift to state 55
-- On LET shift to state 59
-- On LEFT_ROUND_BRACKET shift to state 12
-- On INT shift to state 13
-- On IF shift to state 64
-- On ID shift to state 14
-- On stmt shift to state 82
-- On exp shift to state 72

State 51:
stmt -> READ . LEFT_ROUND_BRACKET INT RIGHT_ROUND_BRACKET [ SEMI_COLLON RIGHT_CURLY_BRACKET ]
-- On LEFT_ROUND_BRACKET shift to state 52

State 52:
stmt -> READ LEFT_ROUND_BRACKET . INT RIGHT_ROUND_BRACKET [ SEMI_COLLON RIGHT_CURLY_BRACKET ]
-- On INT shift to state 53

State 53:
stmt -> READ LEFT_ROUND_BRACKET INT . RIGHT_ROUND_BRACKET [ SEMI_COLLON RIGHT_CURLY_BRACKET ]
-- On RIGHT_ROUND_BRACKET shift to state 54

State 54:
stmt -> READ LEFT_ROUND_BRACKET INT RIGHT_ROUND_BRACKET . [ SEMI_COLLON RIGHT_CURLY_BRACKET ]
-- On SEMI_COLLON reduce production stmt -> READ LEFT_ROUND_BRACKET INT RIGHT_ROUND_BRACKET 
-- On RIGHT_CURLY_BRACKET reduce production stmt -> READ LEFT_ROUND_BRACKET INT RIGHT_ROUND_BRACKET 

State 55:
stmt -> PRINT . LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET [ SEMI_COLLON RIGHT_CURLY_BRACKET ]
-- On LEFT_ROUND_BRACKET shift to state 56

State 56:
stmt -> PRINT LEFT_ROUND_BRACKET . exp RIGHT_ROUND_BRACKET [ SEMI_COLLON RIGHT_CURLY_BRACKET ]
-- On LEFT_ROUND_BRACKET shift to state 12
-- On INT shift to state 13
-- On ID shift to state 14
-- On exp shift to state 57

State 57:
exp -> exp . PLUS exp [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . MINUS exp [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . TIMES exp [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . DIVIDE exp [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . LEQ exp [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . GEQ exp [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . EQ exp [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . NOTEQ exp [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . AND exp [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . OR exp [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . NOT exp [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
stmt -> PRINT LEFT_ROUND_BRACKET exp . RIGHT_ROUND_BRACKET [ SEMI_COLLON RIGHT_CURLY_BRACKET ]
-- On TIMES shift to state 16
-- On RIGHT_ROUND_BRACKET shift to state 58
-- On PLUS shift to state 23
-- On OR shift to state 27
-- On NOTEQ shift to state 29
-- On NOT shift to state 18
-- On MINUS shift to state 31
-- On LEQ shift to state 33
-- On LEFT_ROUND_BRACKET shift to state 20
-- On GEQ shift to state 35
-- On EQ shift to state 37
-- On DIVIDE shift to state 25
-- On AND shift to state 39

State 58:
stmt -> PRINT LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET . [ SEMI_COLLON RIGHT_CURLY_BRACKET ]
-- On SEMI_COLLON reduce production stmt -> PRINT LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET 
-- On RIGHT_CURLY_BRACKET reduce production stmt -> PRINT LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET 

State 59:
stmt -> LET . ID ASSIGN exp IN stmt SEMI_COLLON [ SEMI_COLLON RIGHT_CURLY_BRACKET ]
-- On ID shift to state 60

State 60:
stmt -> LET ID . ASSIGN exp IN stmt SEMI_COLLON [ SEMI_COLLON RIGHT_CURLY_BRACKET ]
-- On ASSIGN shift to state 61

State 61:
stmt -> LET ID ASSIGN . exp IN stmt SEMI_COLLON [ SEMI_COLLON RIGHT_CURLY_BRACKET ]
-- On LEFT_ROUND_BRACKET shift to state 12
-- On INT shift to state 13
-- On ID shift to state 14
-- On exp shift to state 62

State 62:
exp -> exp . PLUS exp [ TIMES PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE AND ]
exp -> exp . MINUS exp [ TIMES PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE AND ]
exp -> exp . TIMES exp [ TIMES PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE AND ]
exp -> exp . DIVIDE exp [ TIMES PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE AND ]
exp -> exp . LEQ exp [ TIMES PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE AND ]
exp -> exp . GEQ exp [ TIMES PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE AND ]
exp -> exp . EQ exp [ TIMES PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE AND ]
exp -> exp . NOTEQ exp [ TIMES PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE AND ]
exp -> exp . AND exp [ TIMES PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE AND ]
exp -> exp . OR exp [ TIMES PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE AND ]
exp -> exp . NOT exp [ TIMES PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE AND ]
exp -> exp . LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET [ TIMES PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET IN GEQ EQ DIVIDE AND ]
stmt -> LET ID ASSIGN exp . IN stmt SEMI_COLLON [ SEMI_COLLON RIGHT_CURLY_BRACKET ]
-- On TIMES shift to state 16
-- On PLUS shift to state 23
-- On OR shift to state 27
-- On NOTEQ shift to state 29
-- On NOT shift to state 18
-- On MINUS shift to state 31
-- On LEQ shift to state 33
-- On LEFT_ROUND_BRACKET shift to state 20
-- On IN shift to state 63
-- On GEQ shift to state 35
-- On EQ shift to state 37
-- On DIVIDE shift to state 25
-- On AND shift to state 39

State 63:
stmt -> LET ID ASSIGN exp IN . stmt SEMI_COLLON [ SEMI_COLLON RIGHT_CURLY_BRACKET ]
-- On WHILE shift to state 10
-- On TYPE shift to state 46
-- On READ shift to state 51
-- On PRINT shift to state 55
-- On LET shift to state 59
-- On LEFT_ROUND_BRACKET shift to state 12
-- On INT shift to state 13
-- On IF shift to state 64
-- On ID shift to state 14
-- On stmt shift to state 80
-- On exp shift to state 72

State 64:
stmt -> IF . LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET LEFT_CURLY_BRACKET stmt RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET stmt RIGHT_CURLY_BRACKET [ SEMI_COLLON RIGHT_CURLY_BRACKET ]
-- On LEFT_ROUND_BRACKET shift to state 65

State 65:
stmt -> IF LEFT_ROUND_BRACKET . exp RIGHT_ROUND_BRACKET LEFT_CURLY_BRACKET stmt RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET stmt RIGHT_CURLY_BRACKET [ SEMI_COLLON RIGHT_CURLY_BRACKET ]
-- On LEFT_ROUND_BRACKET shift to state 12
-- On INT shift to state 13
-- On ID shift to state 14
-- On exp shift to state 66

State 66:
exp -> exp . PLUS exp [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . MINUS exp [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . TIMES exp [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . DIVIDE exp [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . LEQ exp [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . GEQ exp [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . EQ exp [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . NOTEQ exp [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . AND exp [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . OR exp [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . NOT exp [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET [ TIMES RIGHT_ROUND_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
stmt -> IF LEFT_ROUND_BRACKET exp . RIGHT_ROUND_BRACKET LEFT_CURLY_BRACKET stmt RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET stmt RIGHT_CURLY_BRACKET [ SEMI_COLLON RIGHT_CURLY_BRACKET ]
-- On TIMES shift to state 16
-- On RIGHT_ROUND_BRACKET shift to state 67
-- On PLUS shift to state 23
-- On OR shift to state 27
-- On NOTEQ shift to state 29
-- On NOT shift to state 18
-- On MINUS shift to state 31
-- On LEQ shift to state 33
-- On LEFT_ROUND_BRACKET shift to state 20
-- On GEQ shift to state 35
-- On EQ shift to state 37
-- On DIVIDE shift to state 25
-- On AND shift to state 39

State 67:
stmt -> IF LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET . LEFT_CURLY_BRACKET stmt RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET stmt RIGHT_CURLY_BRACKET [ SEMI_COLLON RIGHT_CURLY_BRACKET ]
-- On LEFT_CURLY_BRACKET shift to state 68

State 68:
stmt -> IF LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET LEFT_CURLY_BRACKET . stmt RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET stmt RIGHT_CURLY_BRACKET [ SEMI_COLLON RIGHT_CURLY_BRACKET ]
-- On WHILE shift to state 10
-- On TYPE shift to state 46
-- On READ shift to state 51
-- On PRINT shift to state 55
-- On LET shift to state 59
-- On LEFT_ROUND_BRACKET shift to state 12
-- On INT shift to state 13
-- On IF shift to state 64
-- On ID shift to state 14
-- On stmt shift to state 69
-- On exp shift to state 72

State 69:
stmt -> stmt . SEMI_COLLON stmt [ SEMI_COLLON RIGHT_CURLY_BRACKET ]
stmt -> IF LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET LEFT_CURLY_BRACKET stmt . RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET stmt RIGHT_CURLY_BRACKET [ SEMI_COLLON RIGHT_CURLY_BRACKET ]
-- On SEMI_COLLON shift to state 70
-- On RIGHT_CURLY_BRACKET shift to state 75

State 70:
stmt -> stmt SEMI_COLLON . stmt [ SEMI_COLLON RIGHT_CURLY_BRACKET ]
-- On WHILE shift to state 10
-- On TYPE shift to state 46
-- On READ shift to state 51
-- On PRINT shift to state 55
-- On LET shift to state 59
-- On LEFT_ROUND_BRACKET shift to state 12
-- On INT shift to state 13
-- On IF shift to state 64
-- On ID shift to state 14
-- On stmt shift to state 71
-- On exp shift to state 72

State 71:
stmt -> stmt . SEMI_COLLON stmt [ SEMI_COLLON RIGHT_CURLY_BRACKET ]
stmt -> stmt SEMI_COLLON stmt . [ SEMI_COLLON RIGHT_CURLY_BRACKET ]
-- On SEMI_COLLON shift to state 70
-- On SEMI_COLLON reduce production stmt -> stmt SEMI_COLLON stmt 
-- On RIGHT_CURLY_BRACKET reduce production stmt -> stmt SEMI_COLLON stmt 
** Conflict on SEMI_COLLON

State 72:
exp -> exp . PLUS exp [ TIMES PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . MINUS exp [ TIMES PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . TIMES exp [ TIMES PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . DIVIDE exp [ TIMES PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . LEQ exp [ TIMES PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . GEQ exp [ TIMES PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . EQ exp [ TIMES PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . NOTEQ exp [ TIMES PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . AND exp [ TIMES PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . OR exp [ TIMES PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . NOT exp [ TIMES PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE ASSIGN AND ]
exp -> exp . LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET [ TIMES PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE ASSIGN AND ]
stmt -> exp . ASSIGN exp [ SEMI_COLLON RIGHT_CURLY_BRACKET ]
-- On TIMES shift to state 16
-- On PLUS shift to state 23
-- On OR shift to state 27
-- On NOTEQ shift to state 29
-- On NOT shift to state 18
-- On MINUS shift to state 31
-- On LEQ shift to state 33
-- On LEFT_ROUND_BRACKET shift to state 20
-- On GEQ shift to state 35
-- On EQ shift to state 37
-- On DIVIDE shift to state 25
-- On ASSIGN shift to state 73
-- On AND shift to state 39

State 73:
stmt -> exp ASSIGN . exp [ SEMI_COLLON RIGHT_CURLY_BRACKET ]
-- On LEFT_ROUND_BRACKET shift to state 12
-- On INT shift to state 13
-- On ID shift to state 14
-- On exp shift to state 74

State 74:
exp -> exp . PLUS exp [ TIMES SEMI_COLLON RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . MINUS exp [ TIMES SEMI_COLLON RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . TIMES exp [ TIMES SEMI_COLLON RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . DIVIDE exp [ TIMES SEMI_COLLON RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . LEQ exp [ TIMES SEMI_COLLON RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . GEQ exp [ TIMES SEMI_COLLON RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . EQ exp [ TIMES SEMI_COLLON RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . NOTEQ exp [ TIMES SEMI_COLLON RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . AND exp [ TIMES SEMI_COLLON RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . OR exp [ TIMES SEMI_COLLON RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . NOT exp [ TIMES SEMI_COLLON RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
exp -> exp . LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET [ TIMES SEMI_COLLON RIGHT_CURLY_BRACKET PLUS OR NOTEQ NOT MINUS LEQ LEFT_ROUND_BRACKET GEQ EQ DIVIDE AND ]
stmt -> exp ASSIGN exp . [ SEMI_COLLON RIGHT_CURLY_BRACKET ]
-- On TIMES shift to state 16
-- On PLUS shift to state 23
-- On OR shift to state 27
-- On NOTEQ shift to state 29
-- On NOT shift to state 18
-- On MINUS shift to state 31
-- On LEQ shift to state 33
-- On LEFT_ROUND_BRACKET shift to state 20
-- On GEQ shift to state 35
-- On EQ shift to state 37
-- On DIVIDE shift to state 25
-- On AND shift to state 39
-- On SEMI_COLLON reduce production stmt -> exp ASSIGN exp 
-- On RIGHT_CURLY_BRACKET reduce production stmt -> exp ASSIGN exp 

State 75:
stmt -> IF LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET LEFT_CURLY_BRACKET stmt RIGHT_CURLY_BRACKET . ELSE LEFT_CURLY_BRACKET stmt RIGHT_CURLY_BRACKET [ SEMI_COLLON RIGHT_CURLY_BRACKET ]
-- On ELSE shift to state 76

State 76:
stmt -> IF LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET LEFT_CURLY_BRACKET stmt RIGHT_CURLY_BRACKET ELSE . LEFT_CURLY_BRACKET stmt RIGHT_CURLY_BRACKET [ SEMI_COLLON RIGHT_CURLY_BRACKET ]
-- On LEFT_CURLY_BRACKET shift to state 77

State 77:
stmt -> IF LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET LEFT_CURLY_BRACKET stmt RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET . stmt RIGHT_CURLY_BRACKET [ SEMI_COLLON RIGHT_CURLY_BRACKET ]
-- On WHILE shift to state 10
-- On TYPE shift to state 46
-- On READ shift to state 51
-- On PRINT shift to state 55
-- On LET shift to state 59
-- On LEFT_ROUND_BRACKET shift to state 12
-- On INT shift to state 13
-- On IF shift to state 64
-- On ID shift to state 14
-- On stmt shift to state 78
-- On exp shift to state 72

State 78:
stmt -> stmt . SEMI_COLLON stmt [ SEMI_COLLON RIGHT_CURLY_BRACKET ]
stmt -> IF LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET LEFT_CURLY_BRACKET stmt RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET stmt . RIGHT_CURLY_BRACKET [ SEMI_COLLON RIGHT_CURLY_BRACKET ]
-- On SEMI_COLLON shift to state 70
-- On RIGHT_CURLY_BRACKET shift to state 79

State 79:
stmt -> IF LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET LEFT_CURLY_BRACKET stmt RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET stmt RIGHT_CURLY_BRACKET . [ SEMI_COLLON RIGHT_CURLY_BRACKET ]
-- On SEMI_COLLON reduce production stmt -> IF LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET LEFT_CURLY_BRACKET stmt RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET stmt RIGHT_CURLY_BRACKET 
-- On RIGHT_CURLY_BRACKET reduce production stmt -> IF LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET LEFT_CURLY_BRACKET stmt RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET stmt RIGHT_CURLY_BRACKET 

State 80:
stmt -> stmt . SEMI_COLLON stmt [ SEMI_COLLON ]
stmt -> LET ID ASSIGN exp IN stmt . SEMI_COLLON [ SEMI_COLLON RIGHT_CURLY_BRACKET ]
-- On SEMI_COLLON shift to state 81

State 81:
stmt -> stmt SEMI_COLLON . stmt [ SEMI_COLLON ]
stmt -> LET ID ASSIGN exp IN stmt SEMI_COLLON . [ SEMI_COLLON RIGHT_CURLY_BRACKET ]
-- On WHILE shift to state 10
-- On TYPE shift to state 46
-- On READ shift to state 51
-- On PRINT shift to state 55
-- On LET shift to state 59
-- On LEFT_ROUND_BRACKET shift to state 12
-- On INT shift to state 13
-- On IF shift to state 64
-- On ID shift to state 14
-- On stmt shift to state 71
-- On exp shift to state 72
-- On SEMI_COLLON reduce production stmt -> LET ID ASSIGN exp IN stmt SEMI_COLLON 
-- On RIGHT_CURLY_BRACKET reduce production stmt -> LET ID ASSIGN exp IN stmt SEMI_COLLON 

State 82:
stmt -> stmt . SEMI_COLLON stmt [ SEMI_COLLON RIGHT_CURLY_BRACKET ]
stmt -> TYPE ID ASSIGN exp SEMI_COLLON stmt . [ SEMI_COLLON RIGHT_CURLY_BRACKET ]
-- On SEMI_COLLON shift to state 70
-- On SEMI_COLLON reduce production stmt -> TYPE ID ASSIGN exp SEMI_COLLON stmt 
-- On RIGHT_CURLY_BRACKET reduce production stmt -> TYPE ID ASSIGN exp SEMI_COLLON stmt 
** Conflict on SEMI_COLLON

State 83:
stmt -> stmt . SEMI_COLLON stmt [ SEMI_COLLON RIGHT_CURLY_BRACKET ]
stmt -> WHILE LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET LEFT_CURLY_BRACKET stmt . RIGHT_CURLY_BRACKET [ SEMI_COLLON RIGHT_CURLY_BRACKET ]
-- On SEMI_COLLON shift to state 70
-- On RIGHT_CURLY_BRACKET shift to state 84

State 84:
stmt -> WHILE LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET LEFT_CURLY_BRACKET stmt RIGHT_CURLY_BRACKET . [ SEMI_COLLON RIGHT_CURLY_BRACKET ]
-- On SEMI_COLLON reduce production stmt -> WHILE LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET LEFT_CURLY_BRACKET stmt RIGHT_CURLY_BRACKET 
-- On RIGHT_CURLY_BRACKET reduce production stmt -> WHILE LEFT_ROUND_BRACKET exp RIGHT_ROUND_BRACKET LEFT_CURLY_BRACKET stmt RIGHT_CURLY_BRACKET 

State 85:
function_content -> RIGHT_CURLY_BRACKET . [ EOF ]
-- On EOF reduce production function_content -> RIGHT_CURLY_BRACKET 

State 86:
function_content -> stmt . RIGHT_CURLY_BRACKET [ EOF ]
stmt -> stmt . SEMI_COLLON stmt [ SEMI_COLLON RIGHT_CURLY_BRACKET ]
-- On SEMI_COLLON shift to state 70
-- On RIGHT_CURLY_BRACKET shift to state 87

State 87:
function_content -> stmt RIGHT_CURLY_BRACKET . [ EOF ]
-- On EOF reduce production function_content -> stmt RIGHT_CURLY_BRACKET 

State 88:
top -> ID LEFT_ROUND_BRACKET param_list LEFT_CURLY_BRACKET function_content . EOF [ # ]
-- On EOF shift to state 89

State 89:
top -> ID LEFT_ROUND_BRACKET param_list LEFT_CURLY_BRACKET function_content EOF . [ # ]
-- On # reduce production top -> ID LEFT_ROUND_BRACKET param_list LEFT_CURLY_BRACKET function_content EOF 

State 90:
separated_nonempty_list(COMMA,param) -> param . [ RIGHT_ROUND_BRACKET ]
separated_nonempty_list(COMMA,param) -> param . COMMA separated_nonempty_list(COMMA,param) [ RIGHT_ROUND_BRACKET ]
-- On COMMA shift to state 91
-- On RIGHT_ROUND_BRACKET reduce production separated_nonempty_list(COMMA,param) -> param 

State 91:
separated_nonempty_list(COMMA,param) -> param COMMA . separated_nonempty_list(COMMA,param) [ RIGHT_ROUND_BRACKET ]
-- On TYPE shift to state 3
-- On separated_nonempty_list(COMMA,param) shift to state 92
-- On param shift to state 90

State 92:
separated_nonempty_list(COMMA,param) -> param COMMA separated_nonempty_list(COMMA,param) . [ RIGHT_ROUND_BRACKET ]
-- On RIGHT_ROUND_BRACKET reduce production separated_nonempty_list(COMMA,param) -> param COMMA separated_nonempty_list(COMMA,param) 

State 93:
top -> EOF . [ # ]
-- On # reduce production top -> EOF 

State 94:
top' -> top . [ # ]
-- On # accept top

