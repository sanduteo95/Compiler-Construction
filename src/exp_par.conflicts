
** Conflict (shift/reduce) in state 142.
** Token involved: RIGHT_ROUND_BRACKET
** This state is reached from parse after reading:

FUNCTION ID LEFT_ROUND_BRACKET parameter_list LEFT_CURLY_BRACKET RETURN LEFT_ROUND_BRACKET LEFT_ROUND_BRACKET IF LEFT_ROUND_BRACKET operator_expression RIGHT_ROUND_BRACKET LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

parse 
FUNCTION separated_nonempty_list(FUNCTION,func) EOF 
         func 
         ID LEFT_ROUND_BRACKET parameter_list LEFT_CURLY_BRACKET content 
                                                                 statements RIGHT_CURLY_BRACKET 
                                                                 statement statements 
                                                                 RETURN expression SEMI_COLLON 
                                                                        (?)

** In state 142, looking ahead at RIGHT_ROUND_BRACKET, shifting is permitted
** because of the following sub-derivation:

function_expression LEFT_ROUND_BRACKET loption(separated_nonempty_list(COMMA,argument)) RIGHT_ROUND_BRACKET 
LEFT_ROUND_BRACKET statement RIGHT_ROUND_BRACKET 
                   left_assignment ASSIGN right_assignment SEMI_COLLON 
                   LEFT_ROUND_BRACKET IF LEFT_ROUND_BRACKET operator_expression RIGHT_ROUND_BRACKET LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET . RIGHT_ROUND_BRACKET 

** In state 142, looking ahead at RIGHT_ROUND_BRACKET, reducing production
** statement -> IF LEFT_ROUND_BRACKET operator_expression RIGHT_ROUND_BRACKET LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET 
** is permitted because of the following sub-derivation:

LEFT_ROUND_BRACKET expression RIGHT_ROUND_BRACKET 
                   function_expression LEFT_ROUND_BRACKET loption(separated_nonempty_list(COMMA,argument)) RIGHT_ROUND_BRACKET 
                   LEFT_ROUND_BRACKET statement RIGHT_ROUND_BRACKET // lookahead token appears
                                      IF LEFT_ROUND_BRACKET operator_expression RIGHT_ROUND_BRACKET LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET . 
