
** Conflict (shift/reduce) in state 140.
** Tokens involved: NOTEQ EQ
** The following explanations concentrate on token NOTEQ.
** This state is reached from parse after reading:

FUNCTION ID LEFT_ROUND_BRACKET parameter_list LEFT_CURLY_BRACKET RETURN NEGATE bool_expression 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

parse 
FUNCTION separated_nonempty_list(FUNCTION,func) EOF 
         func 
         ID LEFT_ROUND_BRACKET parameter_list LEFT_CURLY_BRACKET content 
                                                                 statements RIGHT_CURLY_BRACKET 
                                                                 statement 
                                                                 RETURN expression SEMI_COLLON 
                                                                        bool_expression 
                                                                        (?)

** In state 140, looking ahead at NOTEQ, shifting is permitted
** because of the following sub-derivation:

NEGATE bool_expression 
       bool_expression . NOTEQ bool_expression 

** In state 140, looking ahead at NOTEQ, reducing production
** bool_expression -> NEGATE bool_expression 
** is permitted because of the following sub-derivation:

bool_expression NOTEQ bool_expression // lookahead token appears
NEGATE bool_expression . 

** Conflict (shift/reduce) in state 63.
** Tokens involved: NOTEQ EQ
** The following explanations concentrate on token NOTEQ.
** This state is reached from parse after reading:

FUNCTION ID LEFT_ROUND_BRACKET parameter_list LEFT_CURLY_BRACKET RETURN bool_expression AND bool_expression 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

parse 
FUNCTION separated_nonempty_list(FUNCTION,func) EOF 
         func 
         ID LEFT_ROUND_BRACKET parameter_list LEFT_CURLY_BRACKET content 
                                                                 statements RIGHT_CURLY_BRACKET 
                                                                 statement 
                                                                 RETURN expression SEMI_COLLON 
                                                                        bool_expression 
                                                                        (?)

** In state 63, looking ahead at NOTEQ, shifting is permitted
** because of the following sub-derivation:

bool_expression AND bool_expression 
                    bool_expression . NOTEQ bool_expression 

** In state 63, looking ahead at NOTEQ, reducing production
** bool_expression -> bool_expression AND bool_expression 
** is permitted because of the following sub-derivation:

bool_expression NOTEQ bool_expression // lookahead token appears
bool_expression AND bool_expression . 

** Conflict (shift/reduce) in state 61.
** Tokens involved: OR NOTEQ EQ AND
** The following explanations concentrate on token OR.
** This state is reached from parse after reading:

FUNCTION ID LEFT_ROUND_BRACKET parameter_list LEFT_CURLY_BRACKET RETURN bool_expression EQ bool_expression 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

parse 
FUNCTION separated_nonempty_list(FUNCTION,func) EOF 
         func 
         ID LEFT_ROUND_BRACKET parameter_list LEFT_CURLY_BRACKET content 
                                                                 statements RIGHT_CURLY_BRACKET 
                                                                 statement 
                                                                 RETURN expression SEMI_COLLON 
                                                                        bool_expression 
                                                                        (?)

** In state 61, looking ahead at OR, reducing production
** bool_expression -> bool_expression EQ bool_expression 
** is permitted because of the following sub-derivation:

bool_expression OR bool_expression // lookahead token appears
bool_expression EQ bool_expression . 

** In state 61, looking ahead at OR, shifting is permitted
** because of the following sub-derivation:

bool_expression EQ bool_expression 
                   bool_expression . OR bool_expression 

** Conflict (shift/reduce) in state 59.
** Tokens involved: OR NOTEQ EQ AND
** The following explanations concentrate on token OR.
** This state is reached from parse after reading:

FUNCTION ID LEFT_ROUND_BRACKET parameter_list LEFT_CURLY_BRACKET RETURN bool_expression NOTEQ bool_expression 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

parse 
FUNCTION separated_nonempty_list(FUNCTION,func) EOF 
         func 
         ID LEFT_ROUND_BRACKET parameter_list LEFT_CURLY_BRACKET content 
                                                                 statements RIGHT_CURLY_BRACKET 
                                                                 statement 
                                                                 RETURN expression SEMI_COLLON 
                                                                        bool_expression 
                                                                        (?)

** In state 59, looking ahead at OR, reducing production
** bool_expression -> bool_expression NOTEQ bool_expression 
** is permitted because of the following sub-derivation:

bool_expression OR bool_expression // lookahead token appears
bool_expression NOTEQ bool_expression . 

** In state 59, looking ahead at OR, shifting is permitted
** because of the following sub-derivation:

bool_expression NOTEQ bool_expression 
                      bool_expression . OR bool_expression 

** Conflict (shift/reduce) in state 57.
** Tokens involved: NOTEQ EQ
** The following explanations concentrate on token NOTEQ.
** This state is reached from parse after reading:

FUNCTION ID LEFT_ROUND_BRACKET parameter_list LEFT_CURLY_BRACKET RETURN bool_expression OR bool_expression 

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

parse 
FUNCTION separated_nonempty_list(FUNCTION,func) EOF 
         func 
         ID LEFT_ROUND_BRACKET parameter_list LEFT_CURLY_BRACKET content 
                                                                 statements RIGHT_CURLY_BRACKET 
                                                                 statement 
                                                                 RETURN expression SEMI_COLLON 
                                                                        bool_expression 
                                                                        (?)

** In state 57, looking ahead at NOTEQ, shifting is permitted
** because of the following sub-derivation:

bool_expression OR bool_expression 
                   bool_expression . NOTEQ bool_expression 

** In state 57, looking ahead at NOTEQ, reducing production
** bool_expression -> bool_expression OR bool_expression 
** is permitted because of the following sub-derivation:

bool_expression NOTEQ bool_expression // lookahead token appears
bool_expression OR bool_expression . 
